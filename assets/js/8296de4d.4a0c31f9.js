"use strict";(self.webpackChunkhuxley_website=self.webpackChunkhuxley_website||[]).push([[8973],{4137:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(t),f=r,d=c["".concat(s,".").concat(f)]||c[f]||g[f]||i;return t?o.createElement(d,a(a({ref:n},u),{},{components:t})):o.createElement(d,a({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4499:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=t(7462),r=(t(7294),t(4137));const i={id:"typings",title:"Spawner Typings"},a=void 0,l={unversionedId:"spawner/typings",id:"spawner/typings",title:"Spawner Typings",description:"LUAU",source:"@site/docs/spawner/typings.mdx",sourceDirName:"spawner",slug:"/spawner/typings",permalink:"/docs/spawner/typings",draft:!1,tags:[],version:"current",lastUpdatedBy:"Lad",lastUpdatedAt:1687212144,formattedLastUpdatedAt:"Jun 19, 2023",frontMatter:{id:"typings",title:"Spawner Typings"},sidebar:"spawner",previous:{title:"Webhook Setup",permalink:"/docs/spawner/webhook"}},s={},p=[{value:"LUAU",id:"luau",level:2},{value:"Full typings file",id:"full-typings-file",level:2},{value:"ColorSchemeOption",id:"colorschemeoption",level:2},{value:"CategoryTypeOption",id:"categorytypeoption",level:2},{value:"BusResult *",id:"busresult-",level:2},{value:"ThemeConfig",id:"themeconfig",level:2},{value:"CategoryConfig",id:"categoryconfig",level:2},{value:"CategoryConfigs",id:"categoryconfigs",level:2},{value:"GroupConfig",id:"groupconfig",level:2},{value:"WebhookConfig",id:"webhookconfig",level:2},{value:"Config",id:"config",level:2},{value:"EventResponse<code>&lt;T&gt;</code>",id:"eventresponset",level:2},{value:"NotificationObject",id:"notificationobject",level:2},{value:"ColorSchemeConfig",id:"colorschemeconfig",level:2}],u={toc:p},c="wrapper";function g(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"luau"},"LUAU"),(0,r.kt)("p",null,"This uses LUAU types. I recommend reading more about it to understand how it works. ",(0,r.kt)("a",{parentName:"p",href:"https://luau-lang.org/typecheck"},"https://luau-lang.org/typecheck")),(0,r.kt)("h2",{id:"full-typings-file"},"Full typings file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'showLineNumbers title="SpawnerTypings"',showLineNumbers:!0,title:'"SpawnerTypings"'},'--!strict\nexport type ColorSchemeOption = "dark" | "light" | "blue";\nexport type CategoryTypeOption = "open" | "rank" | "clothing" | "gamepass" | "premium" --| "mypod"\n\nexport type BusResult = "NO_WORKSPACE_FOLDER" | "NO_MODELS_FOLDER" | "NO_BUS_FOUND"\nexport type SpawnBusResult = BusResult | "UNABLE_TO_SPAWN" | "ALREADY_HAS_BUS_SPAWNED" | "PERMISSION_DENIED" | "NO_MODEL_GIVEN" | "INVALID_MODEL_GIVEN" | "UNABLE_TO_TELEPORT_BUS" | "UNABLE_TO_TELEPORT_PLAYER" | "SPAWNED"\nexport type DespawnBusResult = BusResult | "UNABLE_TO_DESPAWN" | "DESPAWNED_NOT_DESTROYED" | "DESTROYED_NOT_AVAILABLE" |"DESPAWNED"\nexport type RefuelBusResult = BusResult | "UNABLE_TO_REFUEL" | "REFUELED"\nexport type TurnOffBusResult = BusResult | "UNABLE_TO_TURN_BUS_OFF" | "TURNED_OFF_BUS"\n\nexport type WebhookReceiever = "discord" | "other"\n\nexport type ThemeConfig = {\n    title: string;\n    colorScheme: ColorSchemeOption;\n    logoImageId: number;\n}\n\nexport type CategoryConfig = {\n    title: string;\n    categoryType: CategoryTypeOption;\n    assetId: number?;\n    minimumRank: number?;\n}\n\nexport type CategoryConfigs = {\n    Category1: CategoryConfig;\n    Category2: CategoryConfig?;\n    Category3: CategoryConfig?;\n    Category4: CategoryConfig?;\n    Category5: CategoryConfig?;\n}\n\nexport type GroupConfig = {\n    enabled: boolean;\n    groupId: number;\n    minimumSpawnerRank: number;\n    minimumAdminRank: number;\n    allowVipOwnersServerAdmin: boolean;\n}\n\nexport type WebhookConfig = {\n    enabled: boolean;\n    receiver: WebhookReceiever;\n    webhookServerUrl: string;\n    webhookClientUrl: string;\n    bodies: {[string]: {}}\n}\n\nexport type Config = {\n    theme: ThemeConfig;\n    categories: CategoryConfigs;\n    groupSettings: GroupConfig;\n    webhookSettings: WebhookConfig;\n    busModelsLocation: Folder;\n    depsawnOnPlayerLeave: boolean;\n    teleportPlayerToBus: boolean;\n    busModelSpawnType: "basic" | "advanced";\n}\n\nexport type EventResponse<T> = {\n    status: "OK" | "ERROR";\n    message: string;\n    data: T;\n}\n\nexport type NotificationObject = {\n    plrName: string;\n    plrId: number;\n    body: string;\n    global: boolean?;\n}\n\n\nexport type ColorSchemeConfig = {\n    primary: Color3;\n    secondary: Color3;\n    tertiary: Color3;\n    infoBackgroundColor: Color3;\n    infoContentBackgroundColor: Color3;\n    primaryTextColor: Color3;\n    dashboardButtonColor: Color3;\n    dashboardBoxColor: Color3;\n    dashboardNAColor: Color3;\n    navListTextColor: Color3;\n    welcomeTextColor: Color3;\n    designerTextColor: Color3;\n    spawnerButtonColor: Color3;\n    assignmentTextColor: Color3;\n    notificationStrokeColor: Color3;\n    contentFrameBackgroundId: number;\n    notificationFrameBackgroundId: number;\n    dashboardIconId: number;\n    busIconId: number;\n}\n\nreturn nil;\n')),(0,r.kt)("h2",{id:"colorschemeoption"},"ColorSchemeOption"),(0,r.kt)("p",null,"A List of Options for the Color Scheme"),(0,r.kt)("h2",{id:"categorytypeoption"},"CategoryTypeOption"),(0,r.kt)("p",null,"A List of Options for the Category Type"),(0,r.kt)("h2",{id:"busresult-"},"BusResult ","*"),(0,r.kt)("p",null,"(Applies for ",(0,r.kt)("strong",{parentName:"p"},"all")," bus result types) List of Options for the end result depending on the kind of bus event"),(0,r.kt)("h2",{id:"themeconfig"},"ThemeConfig"),(0,r.kt)("p",null,"Contains items for configuring the theme in the spawner configuration"),(0,r.kt)("h2",{id:"categoryconfig"},"CategoryConfig"),(0,r.kt)("p",null,"Contains items for configuring a category in the spawner configuration"),(0,r.kt)("h2",{id:"categoryconfigs"},"CategoryConfigs"),(0,r.kt)("p",null,"Contains list of category config's"),(0,r.kt)("h2",{id:"groupconfig"},"GroupConfig"),(0,r.kt)("p",null,"Contains items for configuring the group in the spawner configuration"),(0,r.kt)("h2",{id:"webhookconfig"},"WebhookConfig"),(0,r.kt)("p",null,"Contains items for configuring a webhook in the spawner configuration"),(0,r.kt)("h2",{id:"config"},"Config"),(0,r.kt)("p",null,"Contains items for configuring the spawner"),(0,r.kt)("h2",{id:"eventresponset"},"EventResponse",(0,r.kt)("inlineCode",{parentName:"h2"},"<T>")),(0,r.kt)("p",null,"Contains items for the remote function event response object - with a generic type paramater for the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," property."),(0,r.kt)("h2",{id:"notificationobject"},"NotificationObject"),(0,r.kt)("p",null,"Contains items for a notification object usually used when interacting with the ROBLOX ",(0,r.kt)("a",{parentName:"p",href:"https://create.roblox.com/docs/reference/engine/classes/MessagingService"},(0,r.kt)("inlineCode",{parentName:"a"},"MessagingService"))),(0,r.kt)("h2",{id:"colorschemeconfig"},"ColorSchemeConfig"),(0,r.kt)("p",null,"Contains all items used for initalizing and setting the color scheme."))}g.isMDXComponent=!0}}]);